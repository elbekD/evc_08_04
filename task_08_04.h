#ifndef TASK_08_04
#define TASK_08_04

#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include <time.h>
#include <string.h>

char debug;
char error;

/**
 * Функция приведения исходной матрицы к трехдиагональному виду унитарным подобием методом вращений.
 * Результат упрощения матрицы будет записан вместо исходной матрицы по указателю A.
 * Дополнительной памяти не требуется, т.к. текующее преобразование матрицы
 * не зависит от прошлых преобразований.
 * @param  n         размерность матрицы
 * @param  A         указатель на исходную матрицу
 * @param  tmp       указатель на дополнительный вектор
 * @param  precision определяет числа, меньше какого считать нулем
 * @return           0 - работа завершена успешно,
 *                   -1 - метод упрощения не применим к данной матрице
 */
int sim_08_04(int n, double* A, double* tmp, double precision);

/**
 * Функция, определяющая размер дополнительной памяти.
 * Для данного метода решений дополнительной памяти не требуется.
 * @param  n размерность матрицы
 * @return   размер выделяемой дополнительной памяти
 */
int sim_memsize_08_04(int n);

/**
 * Функция построения собственных значений матрицы LR методом для симметричных матриц.
 * Дополнительной памяти не требуется, т.к. текующее преобразование матрицы
 * не зависит от прошлых преобразований.
 * @param  n              размерность матрицы
 * @param  max_iterations ограничение на число итераций алгоритма
 * @param  epsilon        точность
 * @param  A              указатель на матрицу
 * @param  E              указатель на полученные собственные значения
 * @param  tmp            указатель на дополнительный вектор
 * @param  precision      определяет числа, меньше какого считать нулем
 * @return                0 - работа завершена успешно,
 *                        1 - метод не сходится за указанное число итераций,
 *                        -1 - метод поиска собственных значений не применим к данной матрице
 */
int evc_08_04(int n, int max_iterations, double epsilon, double* A, double* E, double* tmp, double precision);

/**
 * Функция, определяющая размер дополнительной памяти.
 * Для данного метода решений дополнительной памяти не требуется.
 * @param  n размерность матрицы
 * @return   размер выделяемой дополнительной памяти
 */
int evc_memsize_08_04(int n);

#endif
